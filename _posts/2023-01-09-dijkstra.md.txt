---
title:  "Find Path"
excerpt: "find path using dijkstra algorithm"

categories:
  - algorithm
tags:
  - [Algorithm]

toc: true
toc_sticky: true
 
date: 2023-01-09
---

# GO
```
package tablereader

import (
	"errors"
	"sort"
)

type position struct {
	X float32
	Y float32
}

type priority struct {
	id     uint64
	weight float64
}

type ELinkType int32

const (
	ELinkType_INTER_CITY    ELinkType = 0
	ELinkType_ARTERIAL      ELinkType = 1
	ELinkType_NORMAL        ELinkType = 2
	ELinkType_INSIDE        ELinkType = 3
	ELinkType_NORMAL_INSIDE ELinkType = 4
)

// findPath : Find a path between buildings.
func (t *WorldMapTable) findPath(startPos, endPos *position, departNodeID, destNodeID uint64, speedMap map[ELinkType]float64) (map[uint64]uint64, map[uint64]float64, uint64, uint64, error) {
	nodeVisitMap := map[uint64]bool{}
	linkVisitMap := map[uint64]bool{}

	distanceMap := map[uint64]float64{departNodeID: 0}
	priorityQueue := []*priority{0: &priority{id: departNodeID, weight: 0}}
	pathMap := map[uint64]uint64{}  // map[nextNodeID]prevNodeID
	timeMap := map[uint64]float64{} // map[nextNodeID]time

	findDestNode := false
	for len(priorityQueue) > 0 {
		curNodeInfo := priorityQueue[0]
		nodeID := curNodeInfo.id

		if nodeID == destNodeID {
			findDestNode = true
			break
		}

		// pop
		priorityQueue = priorityQueue[1:]

		// node visit
		if _, ok := nodeVisitMap[nodeID]; ok {
			continue
		}
		nodeVisitMap[nodeID] = true

		// compare distance
		weight := curNodeInfo.weight
		distance, ok := distanceMap[nodeID]
		if ok && distance < weight {
			continue
		}

		curNode := t.Map.NodeDic[nodeID]
		linkedList := curNode.LinkList
		if curNode.Link > 0 {
			linkedList = append(linkedList, curNode.Link)
		}
		for _, linkID := range linkedList {
			// link visit
			if _, ok := linkVisitMap[linkID]; ok {
				continue
			}
			linkVisitMap[linkID] = true

			link := t.Map.LinkDic[linkID]
			linkedNodeList := []uint64{link.Start, link.End}
			linkedNodeList = append(linkedNodeList, link.OnNodeList...)

			for _, linkedNodeID := range linkedNodeList {
				if linkedNodeID == nodeID {
					continue
				}
				// node visit
				if _, ok := nodeVisitMap[linkedNodeID]; ok {
					continue
				}

				linkedNode := t.Map.NodeDic[linkedNodeID]
				newDistance := getDistance(curNode.Position, linkedNode.Position) / speedMap[link.Type]
				oldDistance, ok := distanceMap[linkedNodeID]
				if ok && oldDistance <= newDistance+weight {
					continue
				}
				distanceMap[linkedNodeID] = newDistance + weight

				newPriority := &priority{
					id:     linkedNodeID,
					weight: distanceMap[linkedNodeID],
				}
				priorityQueue = append(priorityQueue, newPriority)
				pathMap[linkedNodeID] = nodeID
				timeMap[linkedNodeID] = newDistance

				// the index is bigger, the weight is bigger
				sort.Slice(priorityQueue, func(i, j int) bool {
					return priorityQueue[i].weight < priorityQueue[j].weight
				})
			}
		}
	}
	if findDestNode {
		// trace path
		childNodeID := destNodeID
		newPathMap := map[uint64]uint64{}  // map[prevNodeID]newNode
		newTimeMap := map[uint64]float64{} // map[prevNodeID]time
		if len(pathMap) > 0 {
			parentNodeID, ok := pathMap[childNodeID]
			for ok {
				newPathMap[parentNodeID] = childNodeID
				newTimeMap[parentNodeID] = timeMap[childNodeID]
				childNodeID = parentNodeID
				parentNodeID, ok = pathMap[childNodeID]
			}
		}
		return newPathMap, newTimeMap, departNodeID, destNodeID, nil
	}
	return nil, nil, 0, 0, errors.New("can't find path")
}
```